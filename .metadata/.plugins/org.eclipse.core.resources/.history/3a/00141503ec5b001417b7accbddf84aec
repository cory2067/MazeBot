import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.highgui.Highgui;
import org.opencv.highgui.VideoCapture;
import org.opencv.imgproc.Imgproc;


public class MazeBot 
{
	private static final int WAIT_TIME = 100;
	
	private static JTextArea console;
	private static JButton start;
	private static boolean running = true;
	
	public static void main(String[] args) throws InterruptedException
	{
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
		
		//Highgui.imwrite("camera.jpg", capture);
		
		JFrame frame = new JFrame("MazeBot");
		frame.setLayout(new FlowLayout());
		frame.setSize(980, 600);
		
		JLabel label = new JLabel();
		frame.add(label);
		console = new JTextArea(30, 24);
		frame.add(new JScrollPane(console));
		start = new JButton("Start");
		start.setEnabled(false);
		start.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				start.setEnabled(false);
				begin();
			}
		});
		frame.add(start);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		VideoCapture cam = new VideoCapture(0);
		cam.open(0);
		frame.setVisible(true);
		
		if(!cam.isOpened())
		{
			print("No camera detected\nPlug in webcam and restart program");
			running = false;
			Mat nocam = Highgui.imread("nocam.jpg");
			label.setIcon(new ImageIcon(toBufferedImage(nocam)));
			return;
		}
		print("Starting camera feed");
		start.setEnabled(true);
		
		Mat img = new Mat();
		//Mat imgLast = new Mat();
		//cam.read(imgLast); //initialize to some 640x480 mat; lazy solution
		//int steadyFrames = 0;
		
		//int iters = 0;
		while(running)
		{
			img = new Mat();
			Mat temp = new Mat();
			Mat imgLarge = new Mat();
			
			cam.read(temp);	//read raw img (640x480)
			Imgproc.cvtColor(temp, img, Imgproc.COLOR_RGBA2GRAY); //convert to grayscale
			
			//apply adaptive threshold to convert to black and white
			Imgproc.adaptiveThreshold(img, temp, 1000, Imgproc.ADAPTIVE_THRESH_MEAN_C, Imgproc.THRESH_BINARY, 9, 8);
			
			//morph open to improve clarity of maze walls
			Mat kernel = Imgproc.getStructuringElement(Imgproc.CV_SHAPE_RECT, new Size(4, 4));
			Imgproc.morphologyEx(temp, img, Imgproc.MORPH_OPEN, kernel);
			
			//make image smaller to improve processing speed
			Imgproc.resize(img, temp, new Size(320, 240));
			Imgproc.threshold(temp, img, 200, 255, Imgproc.THRESH_BINARY);
			
			//expand image for viewing on the GUI
			Imgproc.resize(img, imgLarge, new Size(), 2, 2, Imgproc.INTER_AREA);
			//Imgproc.threshold(temp, imgLarge, 200, 255, Imgproc.THRESH_BINARY);
			
			label.setIcon(new ImageIcon(toBufferedImage(imgLarge)));
			
			//int diff = 0;
			//for(int y = 0; y < 240; y++)
			//	for(int x = 0; x < 320; x++)
			//		diff += (get(img, x, y) != get(imgLast, x, y)) ? 1 : 0;
			
			//if(diff < 5000)
			//	steadyFrames++;
			//else
			//	steadyFrames = 0;
			//print(steadyFrames);
			//imgLast = img;
			//iters++;
			//if(iters > 20 && steadyFrames == 5)
			//	break;
			
			Thread.sleep(WAIT_TIME);
		}
		
		print("Image captured");
	}

	public static void begin()
	{
		running = false;
		
	}
	
	public static int get(Mat m, int x, int y)
	{
		return (int) m.get(y, x)[0];
	}
	
	public static BufferedImage toBufferedImage(Mat m)
	{	
	    int type = BufferedImage.TYPE_BYTE_GRAY;
	    if(m.channels() > 1)
	        type = BufferedImage.TYPE_3BYTE_BGR;
	    
	    byte [] b = new byte[m.channels()*m.cols()*m.rows()];
	    m.get(0,0,b);
	    BufferedImage image = new BufferedImage(m.cols(),m.rows(), type);
	    final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
	    System.arraycopy(b, 0, targetPixels, 0, b.length);  
	    return image;
	}
	
	public static void print(int i)
	{
		print(Integer.toString(i));
		
	}
	
	public static void print(String s)
	{
		console.append(s + "\n");
		console.setCaretPosition(console.getDocument().getLength());
	}
}
